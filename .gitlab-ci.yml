image: debian:latest

before_script:
  ##g++
  - apt-get update -qq && apt-get install -y g++ build-essential  doxygen graphviz  git
  - g++ --version
  - which g++
  ##git
  - git config --global user.email "$GITLAB_USER_EMAIL"
  - git config --global user.name  "$GITLAB_USER_NAME"
  ##boost
  - apt-get install -y libboost-dev
  ##docker container
#  - printenv
  ##CImg
#  - apt-get install -y cimg-dev cimg-doc cimg-examples #libxrandr-dev
  ##NetCDF
  - apt-get install -y netcdf-bin libnetcdf-cxx-legacy-dev
  - find / 2>/dev/null | grep -e libnetcdf.a -e libnetcdf.so -e libnetcdf_c++.a -e libnetcdf_c++.so

build:
  stage: build
  script:
  ##docker container
  - uname -m
#  - printenv
  ##imported repository
  - cd $CI_PROJECT_DIR
  - ls
  - grep url $CI_PROJECT_DIR/.git/config
  - git branch -a
  - git checkout -b CI_$CI_BUILD_REF_NAME
  ##repository
  - mkdir -p /home/user
  - cd /home/user/
  - git clone $CI_PROJECT_DIR .
#temporary
  - ./ci-temporary.sh
  - git branch -a
  - ls *

  ##make all e.g. bin, doc, run, ...
  - make
  - ls *

  ##commit
  - git add VERSION $CI_BUILD_REF_NAME'_help.output'
  - git add doc/html
  - uname -m > ARCH.txt
  - git add ARCH.txt
  - git commit -am 'CI output'
  ##push
  - cd /builds/$CI_PROJECT_PATH
  - git checkout $CI_BUILD_REF_NAME
  - git branch
  - cd /home/user/
  - git push
  #artifacts dir.
  - cd $CI_PROJECT_DIR
  - git checkout CI_$CI_BUILD_REF_NAME
  - ls $CI_PROJECT_DIR
  - echo $CI_PROJECT_DIR

  artifacts:
    expose_as: 'built in container'
    paths:
    - ARCH.txt
    - VERSION
    - hello_cimg_help.output
    - doc/html


